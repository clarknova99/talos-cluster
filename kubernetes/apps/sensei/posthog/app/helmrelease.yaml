---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/app-template-3.6.1/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: posthog
  namespace: sensei
spec:
  interval: 15m
  chart:
    spec:
      chart: app-template
      version: 3.6.0
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
      interval: 15m
  maxHistory: 3
  install:
    remediation:
      retries: 5
  upgrade:
    remediation:
      retries: 5
  values:
    persistence:
      scripts:
        enabled: true
        type: configMap
        name: posthog-scripts
        globalMounts: 
          - /scripts


    controllers:
      posthog:

        initContainers:
          migrations:
            image:
              repository: posthog/posthog
              tag: latest
            command:
              - /bin/bash
              - -c
              - |
                python manage.py migrate && \
                python manage.py migrate_clickhouse && \
                python manage.py run_async_migrations
            env: &baseEnv
              DISABLE_SECURE_SSL_REDIRECT: "true"
              IS_BEHIND_PROXY: "true"
              DATABASE_URL: "postgres://${SECRET_PGADMIN_USER}:${SECRET_PGADMIN_PASSWORD}@postgres16-rw.database.svc.cluster.local:5432/posthog"
              CLICKHOUSE_HOST: "clickhouse.database.svc.cluster.local"
              CLICKHOUSE_DATABASE: "posthog"
              CLICKHOUSE_SECURE: "false"
              CLICKHOUSE_VERIFY: "false"
              KAFKA_HOSTS: "kafka.database.svc.cluster.local:9092"
              REDIS_URL: "redis://dragonfly.database.svc.cluster.local:6379"
              PGHOST: "postgres16-rw.database.svc.cluster.local"
              PGUSER: "${SECRET_PGADMIN_USER}"
              PGPASSWORD: "${SECRET_PGADMIN_PASSWORD}"
              DEPLOYMENT: "hobby"
              SECRET_KEY: "${SECRET_POSTHOG_KEY}"
              SITE_URL: "https://posthog.${SECRET_DOMAIN_TWO}"

        containers:
          worker:
            image:
              repository: posthog/posthog
              tag: latest
            command: 
              - /bin/bash
              - -c
              - "/scripts/docker-worker-celery --with-scheduler"
            env:
              <<: *baseEnv


          web:
              image:
                repository: posthog/posthog
                tag: latest
              command:
                - /bin/bash
                - -c
                - "/scripts/start-backend & /scripts/start-frontend"
              env:
                <<: *baseEnv
              probes:
                liveness:
                  enabled: true
                  custom: true
                  spec:
                    httpGet:
                      path: /api/health/
                      port: 8000
                    initialDelaySeconds: 300
                    periodSeconds: 10
                readiness:
                  enabled: true
                  custom: true
                  spec:
                    httpGet:
                      path: /api/health/
                      port: 8000
                    initialDelaySeconds: 30
                    periodSeconds: 10

          capture:
            image:
              repository: ghcr.io/posthog/posthog/capture
              tag: master
            env:
              ADDRESS: "0.0.0.0:3000"
              KAFKA_TOPIC: "events_plugin_ingestion"
              KAFKA_HOSTS: "kafka.database.svc.cluster.local:9092"
              REDIS_URL: "redis://dragonfly.database.svc.cluster.local:6379"
              CAPTURE_MODE: "events"

          replay-capture:
            image:
              repository: ghcr.io/posthog/posthog/capture
              tag: master
            env:
              ADDRESS: "0.0.0.0:3000"
              KAFKA_TOPIC: "session_recording_snapshot_item_events"
              KAFKA_HOSTS: "kafka.database.svc.cluster.local:9092"
              REDIS_URL: "redis://dragonfly.database.svc.cluster.local:6379"
              CAPTURE_MODE: "recordings"

          property-defs-rs:
            image:
              repository: ghcr.io/posthog/posthog/property-defs-rs
              tag: master
            env:
              DATABASE_URL: "postgres://${SECRET_PGADMIN_USER}:${SECRET_PGADMIN_PASSWORD}@postgres16-rw.database.svc.cluster.local:5432/posthog"
              KAFKA_HOSTS: "kafka.database.svc.cluster.local:9092"
              SKIP_WRITES: "false"
              SKIP_READS: "false"
              FILTER_MODE: "opt-out"

          plugins:
            image:
              repository: posthog/posthog
              tag: latest
            command:
              - /scripts/plugin-server
              - --no-restart-loop
            env:
              <<: *baseEnv

          livestream:
            image:
              repository: ghcr.io/posthog/livestream
              tag: main
            env:
              KAFKA_HOSTS: "kafka.database.svc.cluster.local:9092"

          flower:
            image:
              repository: mher/flower
              tag: 2.0.0
            env:
              FLOWER_PORT: "5555"
              CELERY_BROKER_URL: "redis://dragonfly.database.svc.cluster.local:6379"

          temporal:
            image:
              repository: temporalio/auto-setup
              tag: 1.20.0
            env:
              DB: postgresql
              DB_PORT: "5432"
              POSTGRES_USER: "${SECRET_PGADMIN_USER}"
              POSTGRES_PWD: "${SECRET_PGADMIN_PASSWORD}"
              POSTGRES_SEEDS: "postgres16-rw.database.svc.cluster.local"
              DYNAMIC_CONFIG_FILE_PATH: "config/dynamicconfig/development-sql.yaml"
              ENABLE_ES: "false"

          temporal-ui:
            image:
              repository: temporalio/ui
              tag: 2.34.0
            env:
              TEMPORAL_ADDRESS: "temporal:7233"
              TEMPORAL_CORS_ORIGINS: "https://posthog.${SECRET_DOMAIN_TWO}"
              TEMPORAL_CSRF_COOKIE_INSECURE: "true"

          temporal-django-worker:
            image:
              repository: posthog/posthog
              tag: latest
            command:
              - /scripts/temporal-django-worker
            env:
              <<: *baseEnv
              TEMPORAL_HOST: "temporal"
  

    service:

      capture:
        controller: posthog
        ports:
          http:
            port: 3000  
      replay-capture:
        controller: posthog
        ports:
          http:
            port: 3000   
      web:
        controller: posthog
        ports:
          http:
            port: 3000    
      flower:
        controller: posthog
        ports:
          http:
            port: 5555                     
      temporal:
        controller: posthog
        ports:
          grpc:
            port: 7233
      temporal-ui:
        controller: posthog
        ports:
          http:
            port: 8080                             
    ingress:
      app:
        annotations:
          external-dns.alpha.kubernetes.io/target: "external.${SECRET_DOMAIN_TWO}"
          nginx.ingress.kubernetes.io/proxy-read-timeout: "3600"
          nginx.ingress.kubernetes.io/proxy-send-timeout: "3600"
          hajimari.io/enable: "true"
          hajimari.io/icon: mdi:math-compass
        className: external
        enabled: true
        hosts:
          - host: posthog.${SECRET_DOMAIN_TWO}
            paths:
              - path: /
                service:
                  identifier: web
                  port: 8000
          - host: capture.posthog.${SECRET_DOMAIN_TWO}
            paths:
              - path: /
                service:
                  identifier: capture
                  port: 3000                                                 
          - host: replay-capture.posthog.${SECRET_DOMAIN_TWO}
            paths:
              - path: /
                service:
                  identifier: eplay-capture
                  port: 3000   
          - host: temporal.posthog.${SECRET_DOMAIN_TWO}
            paths:
              - path: /
                service:
                  name: temporal-ui
                  port: 8080

          - host: flower.posthog.${SECRET_DOMAIN_TWO}
            paths:
              - path: /
                service:
                  name: flower
                  port: 5555
        tls:
          - hosts:
              - posthog.${SECRET_DOMAIN_TWO}
              - capture.posthog.${SECRET_DOMAIN_TWO}
              - replay-capture.posthog.${SECRET_DOMAIN_TWO}
              - temporal.posthog.${SECRET_DOMAIN_TWO}
              - flower.posthog.${SECRET_DOMAIN_TWO}
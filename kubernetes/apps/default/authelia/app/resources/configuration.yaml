---
  # To allow sign in both with username and email, one can use a filter like
  #  users_filter: (&(|({username_attribute}={input})({mail_attribute}={input}))(objectClass=person))
authentication_backend:
  ldap:
    address: ldap://lldap.default.svc.cluster.local:389
    implementation: custom
    timeout: 5s
    start_tls: false
    base_dn: dc=home,dc=arpa
    additional_users_dn: ou=people
    users_filter: (&({username_attribute}={input})(objectClass=person))
    additional_groups_dn: ou=groups
    groups_filter: (member={dn})
    user: uid=admin,ou=people,dc=home,dc=arpa
    attributes:
      username: uid
      display_name: displayName
      group_name: cn
      mail: mail
      member_of: memberOf
  password_reset:
    disable: false
  refresh_interval: 1m

session:
  same_site: lax
  inactivity: 5m
  expiration: 1h
  remember_me: 1M
  cookies:
    - name: ${SECRET_DOMAIN}_session
      domain: ${SECRET_DOMAIN}
      authelia_url: https://auth.${SECRET_DOMAIN}
      default_redirection_url: https://${SECRET_DOMAIN}
    - name: ${SECRET_DOMAIN_TWO}_session
      domain: ${SECRET_DOMAIN_TWO}
      authelia_url: https://auth.${SECRET_DOMAIN_TWO}
      default_redirection_url: https://${SECRET_DOMAIN_TWO}      
  redis:
    database_index: 2
    host: dragonfly.database.svc.cluster.local

notifier:
  disable_startup_check: true
  smtp:
    username: "${SECRET_MAIL_USERNAME}"
    # Password can also be set using a secret: https://www.authelia.com/configuration/methods/secrets/
    password: "${SECRET_MAIL_PASSWORD}"
    sender: "${SECRET_DOMAIN} auth <auth@${SECRET_DOMAIN}>"
    host: "${SECRET_MAIL_HOST}"
    port: "${SECRET_MAIL_PORT}"

totp:
  disable: false
  issuer: authelia.com

webauthn:
  disable: true

duo_api:
  disable: true

access_control:
  default_policy: one_factor
  networks:
    - name: internal
      networks: ["10.0.0.0/8", "172.16.0.0/12", "192.168.0.0/16"]
  rules:
  
regulation:
  max_retries: 3
  find_time: 2m
  ban_time: 5m

identity_providers:
  oidc:
    cors:
      endpoints: ["authorization", "token", "revocation", "introspection"]
      allowed_origins_from_client_redirect_uris: true
    clients:
      - client_id: grafana
        client_name: grafana
        description: Grafana
        secret: ${SECRET_OAUTH_CLIENT_SECRET}
        public: false
        require_pkce: true
        authorization_policy: one_factor
        pre_configured_consent_duration: 1y
        scopes: ["openid", "profile", "groups", "email"]
        redirect_uris: ["https://grafana.${SECRET_DOMAIN}/login/generic_oauth"]
        userinfo_signing_algorithm: none
      - client_id: minio
        description: Minio
        secret: "${SECRET_OAUTH_CLIENT_SECRET}"  # The digest of 'insecure_secret'.
        public: false
        authorization_policy: one_factor
        pre_configured_consent_duration: 1y
        redirect_uris: ["https://minio.${SECRET_DOMAIN}/oauth_callback"]
        scopes: ["openid", "profile", "groups", "email"]
        userinfo_signing_algorithm: none
      - client_id: pgadmin
        client_name: pgAdmin
        client_secret: ${SECRET_OAUTH_CLIENT_SECRET}
        public: false
        authorization_policy: one_factor
        redirect_uris: https://pgadmin.${SECRET_DOMAIN}/oauth2/authorize
        scopes: ["openid", "profile", "groups", "email"]
        userinfo_signed_response_alg: none
      # - id: headlamp
      #   description: Headlamp
      #   secret: "${SECRET_HEADLAMP_OAUTH_CLIENT_SECRET}"
      #   public: false
      #   authorization_policy: one_factor
      #   pre_configured_consent_duration: 1y
      #   scopes: ["openid", "profile", "groups", "email"]
      #   redirect_uris: ["https://headlamp.${SECRET_DOMAIN}/oidc-callback"]
      #   userinfo_signing_algorithm: none
